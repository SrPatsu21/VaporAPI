# Defines the user which Nginx will run
user nginx;

# Defines the number of workers.
# 'auto' automatically adjusts based on the number of CPU cores
worker_processes auto;

# Specifies the path of the error log file and the severity level. 'Warn' or more bass
error_log /var/log/nginx/error.log warn;

# Defines the file where the Nginx PID (Process ID) is stored.
# This is used by the system to manage the process (stopping or restarting the server).
pid /var/run/nginx.pid;

# 'events' block configures how Nginx manages network events, such as client connections.
events {
    # Defines the maximum number of simultaneous connections per worker.
    worker_connections 1024;
}

# 'http' block contains global settings for the HTTP/HTTPS protocol.
http {
    # Includes an external file that associates file extensions (.html,.jpg) with MIME types
    # allowing Nginx to correctly tell browsers how to interpret uploaded files.
    include /etc/nginx/mime.types;

    # Sets the default MIME type for files with no mapped extension (application/octet-stream).
    default_type application/octet-stream;

    # Enables the use of 'sendfile', an efficient system call that transfers files directly from disk to the network,
    # reducing overhead by avoiding copies in the user's memory.
    sendfile on;

    # Defines the time (in seconds) that a persistent connection (keep-alive) will be kept open.
    keepalive_timeout 65;

    # Defines a group of upstream (backend) servers called 'express_api'.
    # Nginx will balance requests between these servers using a standard algorithm (round-robin, unless otherwise configured).
    upstream vapor_api {
        # 'max_fails=3' and 'fail_timeout=30s' define fault tolerance:
        # After 3 failures in 30 seconds, the server is temporarily removed from the balance.
        server api1:5001 max_fails=3 fail_timeout=30s;
        server api2:5002 max_fails=3 fail_timeout=30s;
        server api3:5003 max_fails=3 fail_timeout=30s;
        # Backup server on port 3000 (backup_api). It is only used if the primary servers are unavailable.
        # It does not perform any API operations
        server backup_api:3000 backup;
    }

    # First 'server' block: handles HTTP requests on port 80 and redirects to HTTPS.
    server {
        listen 80;

        # Sets the name of the server. 'localhost' is used for local testing; in production, it would be a real domain.
        # TODO Change to real domain
        server_name localhost;

        # Redirects all requests to HTTPS with a 301 code (permanent redirect)
        return 301 https://$host$request_uri;
    }

    # Second 'server' block: handles HTTPS requests on port 443 with HTTP/2 support.
    server {
        # Listens on port 443 (default for HTTPS) with SSL enabled and HTTP/2 enabled.
        listen 443 ssl;
        http2 on;

        # Sets the name of the server. 'localhost' is used for local testing; in production, it would be a real domain.
        # TODO Change to real domain
        server_name localhost;

        # Path to SSL certificate (includes public certificate and certificate chain).
        # TODO Here, we use a Locally generated self-signed certificate. we need to change this
        ssl_certificate /etc/letsencrypt/fullchain.pem;

        # Path to the private key corresponding to the certificate.
        ssl_certificate_key /etc/letsencrypt/privkey.pem;

        # Defines the supported SSL/TLS protocols. TLSv1.2 and TLSv1.3 are modern and secure versions
        ssl_protocols TLSv1.2 TLSv1.3;

        # Prioritizes server-defined ciphers over client preferences
        ssl_prefer_server_ciphers on;

        # List of allowed cryptographic ciphers.
        ssl_ciphers EECDH+AESGCM:EDH+AESGCM;

        # The 'location' block defines how to handle requests to the root ('/') of the site.
        location / {
            # backend (app1, app2 ou app3).
            proxy_pass http://vapor_api;

            # Sets HTTP headers sent to the backend to preserve customer information:
            # 'Host' retains the original domain of the request, which is essential for applications that depend on it.
            proxy_set_header Host $host;

            # 'X-Real-IP' sends the client's real IP to the backend, useful for logging or authentication.
            proxy_set_header X-Real-IP $remote_addr;

            # 'X-Forwarded-For' adds the client's IP to the list of proxies, allowing tracking in scenarios with multiple proxies.
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # 'X-Forwarded-Proto' tells you the original protocol (http or https).
            proxy_set_header X-Forwarded-Proto $scheme;

            # Sets the maximum time (in seconds) to establish the connection with the backend.
            proxy_connect_timeout 5;

            # Limits the time to send data to the backend, preventing crashes if the backend is slow.
            proxy_send_timeout 10;

            # Limits the time to receive a response from the backend, ensuring that time-consuming requests are closed.
            proxy_read_timeout 10;

            # Sets the maximum request body size (10 megabytes).
            client_max_body_size 10M;
        }
    }
}